// Generated from c:/Users/marsa/analizador-cadenas/myGramarLexer.g4 by ANTLR 4.13.2
// jshint ignore: start
import antlr4 from 'antlr4';


const serializedATN = [4,0,27,235,6,-1,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,
7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,
2,12,7,12,2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,
19,7,19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,
7,26,2,27,7,27,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,3,
0,73,8,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,
1,2,1,2,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,
1,4,1,4,1,4,1,4,3,4,113,8,4,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,
1,5,1,5,1,5,1,5,1,5,1,5,1,5,3,5,133,8,5,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,
1,6,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,
1,8,1,8,1,8,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,11,1,
11,1,12,1,12,1,13,1,13,5,13,181,8,13,10,13,12,13,184,9,13,1,14,1,14,1,15,
4,15,189,8,15,11,15,12,15,190,1,16,1,16,1,17,1,17,1,18,1,18,1,19,1,19,1,
20,1,20,1,21,1,21,1,21,1,21,1,21,1,22,4,22,209,8,22,11,22,12,22,210,1,22,
1,22,1,23,1,23,1,23,1,23,1,23,1,24,1,24,1,24,1,24,1,25,1,25,1,25,1,25,1,
26,1,26,1,26,1,26,1,27,1,27,1,27,1,27,0,0,28,2,4,4,5,6,6,8,7,10,8,12,9,14,
10,16,11,18,12,20,13,22,14,24,15,26,16,28,17,30,18,32,19,34,20,36,21,38,
22,40,23,42,24,44,0,46,25,48,26,50,0,52,0,54,0,56,27,2,0,1,7,3,0,65,90,95,
95,97,122,3,0,48,57,65,90,97,122,1,0,48,57,8,0,33,33,35,46,58,62,64,64,91,
91,93,95,123,123,125,125,3,0,9,10,13,13,32,32,2,0,65,90,97,122,5,0,33,33,
44,44,46,46,58,59,63,63,239,0,2,1,0,0,0,0,4,1,0,0,0,0,6,1,0,0,0,0,8,1,0,
0,0,0,10,1,0,0,0,0,12,1,0,0,0,0,14,1,0,0,0,0,16,1,0,0,0,0,18,1,0,0,0,0,20,
1,0,0,0,0,22,1,0,0,0,0,24,1,0,0,0,0,26,1,0,0,0,0,28,1,0,0,0,0,30,1,0,0,0,
0,32,1,0,0,0,0,34,1,0,0,0,0,36,1,0,0,0,0,38,1,0,0,0,0,40,1,0,0,0,0,42,1,
0,0,0,0,44,1,0,0,0,0,46,1,0,0,0,1,48,1,0,0,0,1,50,1,0,0,0,1,52,1,0,0,0,1,
54,1,0,0,0,1,56,1,0,0,0,2,72,1,0,0,0,4,74,1,0,0,0,6,83,1,0,0,0,8,92,1,0,
0,0,10,112,1,0,0,0,12,132,1,0,0,0,14,134,1,0,0,0,16,143,1,0,0,0,18,152,1,
0,0,0,20,163,1,0,0,0,22,165,1,0,0,0,24,174,1,0,0,0,26,176,1,0,0,0,28,178,
1,0,0,0,30,185,1,0,0,0,32,188,1,0,0,0,34,192,1,0,0,0,36,194,1,0,0,0,38,196,
1,0,0,0,40,198,1,0,0,0,42,200,1,0,0,0,44,202,1,0,0,0,46,208,1,0,0,0,48,214,
1,0,0,0,50,219,1,0,0,0,52,223,1,0,0,0,54,227,1,0,0,0,56,231,1,0,0,0,58,59,
5,102,0,0,59,60,5,117,0,0,60,61,5,110,0,0,61,62,5,99,0,0,62,63,5,105,0,0,
63,64,5,243,0,0,64,73,5,110,0,0,65,66,5,102,0,0,66,67,5,117,0,0,67,68,5,
110,0,0,68,69,5,99,0,0,69,70,5,105,0,0,70,71,5,111,0,0,71,73,5,110,0,0,72,
58,1,0,0,0,72,65,1,0,0,0,73,3,1,0,0,0,74,75,5,100,0,0,75,76,5,101,0,0,76,
77,5,118,0,0,77,78,5,111,0,0,78,79,5,108,0,0,79,80,5,118,0,0,80,81,5,101,
0,0,81,82,5,114,0,0,82,5,1,0,0,0,83,84,5,118,0,0,84,85,5,97,0,0,85,86,5,
114,0,0,86,87,5,105,0,0,87,88,5,97,0,0,88,89,5,98,0,0,89,90,5,108,0,0,90,
91,5,101,0,0,91,7,1,0,0,0,92,93,5,61,0,0,93,9,1,0,0,0,94,95,5,109,0,0,95,
96,5,97,0,0,96,97,5,121,0,0,97,98,5,117,0,0,98,99,5,115,0,0,99,100,5,99,
0,0,100,101,5,117,0,0,101,102,5,108,0,0,102,113,5,97,0,0,103,104,5,109,0,
0,104,105,5,97,0,0,105,106,5,121,0,0,106,107,5,250,0,0,107,108,5,115,0,0,
108,109,5,99,0,0,109,110,5,117,0,0,110,111,5,108,0,0,111,113,5,97,0,0,112,
94,1,0,0,0,112,103,1,0,0,0,113,11,1,0,0,0,114,115,5,109,0,0,115,116,5,105,
0,0,116,117,5,110,0,0,117,118,5,117,0,0,118,119,5,115,0,0,119,120,5,99,0,
0,120,121,5,117,0,0,121,122,5,108,0,0,122,133,5,97,0,0,123,124,5,109,0,0,
124,125,5,105,0,0,125,126,5,110,0,0,126,127,5,250,0,0,127,128,5,115,0,0,
128,129,5,99,0,0,129,130,5,117,0,0,130,131,5,108,0,0,131,133,5,97,0,0,132,
114,1,0,0,0,132,123,1,0,0,0,133,13,1,0,0,0,134,135,5,108,0,0,135,136,5,111,
0,0,136,137,5,110,0,0,137,138,5,103,0,0,138,139,5,105,0,0,139,140,5,116,
0,0,140,141,5,117,0,0,141,142,5,100,0,0,142,15,1,0,0,0,143,144,5,105,0,0,
144,145,5,110,0,0,145,146,5,118,0,0,146,147,5,101,0,0,147,148,5,114,0,0,
148,149,5,116,0,0,149,150,5,105,0,0,150,151,5,114,0,0,151,17,1,0,0,0,152,
153,5,114,0,0,153,154,5,101,0,0,154,155,5,101,0,0,155,156,5,109,0,0,156,
157,5,112,0,0,157,158,5,108,0,0,158,159,5,97,0,0,159,160,5,122,0,0,160,161,
5,97,0,0,161,162,5,114,0,0,162,19,1,0,0,0,163,164,5,43,0,0,164,21,1,0,0,
0,165,166,5,105,0,0,166,167,5,109,0,0,167,168,5,112,0,0,168,169,5,114,0,
0,169,170,5,105,0,0,170,171,5,109,0,0,171,172,5,105,0,0,172,173,5,114,0,
0,173,23,1,0,0,0,174,175,5,59,0,0,175,25,1,0,0,0,176,177,5,44,0,0,177,27,
1,0,0,0,178,182,7,0,0,0,179,181,7,1,0,0,180,179,1,0,0,0,181,184,1,0,0,0,
182,180,1,0,0,0,182,183,1,0,0,0,183,29,1,0,0,0,184,182,1,0,0,0,185,186,7,
0,0,0,186,31,1,0,0,0,187,189,7,2,0,0,188,187,1,0,0,0,189,190,1,0,0,0,190,
188,1,0,0,0,190,191,1,0,0,0,191,33,1,0,0,0,192,193,5,40,0,0,193,35,1,0,0,
0,194,195,5,41,0,0,195,37,1,0,0,0,196,197,5,123,0,0,197,39,1,0,0,0,198,199,
5,125,0,0,199,41,1,0,0,0,200,201,7,3,0,0,201,43,1,0,0,0,202,203,5,34,0,0,
203,204,1,0,0,0,204,205,6,21,0,0,205,206,6,21,1,0,206,45,1,0,0,0,207,209,
7,4,0,0,208,207,1,0,0,0,209,210,1,0,0,0,210,208,1,0,0,0,210,211,1,0,0,0,
211,212,1,0,0,0,212,213,6,22,2,0,213,47,1,0,0,0,214,215,5,34,0,0,215,216,
1,0,0,0,216,217,6,23,3,0,217,218,6,23,4,0,218,49,1,0,0,0,219,220,7,5,0,0,
220,221,1,0,0,0,221,222,6,24,5,0,222,51,1,0,0,0,223,224,7,2,0,0,224,225,
1,0,0,0,225,226,6,25,6,0,226,53,1,0,0,0,227,228,7,6,0,0,228,229,1,0,0,0,
229,230,6,26,7,0,230,55,1,0,0,0,231,232,5,32,0,0,232,233,1,0,0,0,233,234,
6,27,8,0,234,57,1,0,0,0,8,0,1,72,112,132,182,190,210,9,7,1,0,5,1,0,6,0,0,
7,2,0,4,0,0,7,18,0,7,19,0,7,24,0,7,3,0];


const atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

const decisionsToDFA = atn.decisionToState.map( (ds, index) => new antlr4.dfa.DFA(ds, index) );

export default class myGramarLexer extends antlr4.Lexer {

    static grammarFileName = "myGramarLexer.g4";
    static channelNames = [ "DEFAULT_TOKEN_CHANNEL", "HIDDEN" ];
	static modeNames = [ "DEFAULT_MODE", "INSIDE_STRING" ];
	static literalNames = [ null, null, null, null, null, "'devolver'", "'variable'", 
                         "'='", null, null, "'longitud'", "'invertir'", 
                         "'reemplazar'", "'+'", "'imprimir'", "';'", "','", 
                         null, null, null, "'('", "')'", "'{'", "'}'", null, 
                         null, "'\"'", "' '" ];
	static symbolicNames = [ null, "DOBCOM_APERTURA", "DOBCOM_CIERRE", "ESPACIO", 
                          "FUN", "DEV", "VAR", "EQ", "MAYUS", "MINUS", "LONG", 
                          "INVERT", "REMPL", "ADD", "IMP", "SEMICOLON", 
                          "COMA", "NOMBRE", "LETRA", "NUM", "LPAREN", "RPAREN", 
                          "LBRACE", "RBRACE", "SIMB", "WS", "COMILLA_CIERRE_LEX", 
                          "ESPACIO_EN_CADENA_LEX" ];
	static ruleNames = [ "FUN", "DEV", "VAR", "EQ", "MAYUS", "MINUS", "LONG", 
                      "INVERT", "REMPL", "ADD", "IMP", "SEMICOLON", "COMA", 
                      "NOMBRE", "LETRA", "NUM", "LPAREN", "RPAREN", "LBRACE", 
                      "RBRACE", "SIMB", "DOBCOM_APERTURA_LEX", "WS", "COMILLA_CIERRE_LEX", 
                      "LETRA_EN_CADENA", "DIG_EN_CADENA", "SIMB_EN_CADENA", 
                      "ESPACIO_EN_CADENA_LEX" ];

    constructor(input) {
        super(input)
        this._interp = new antlr4.atn.LexerATNSimulator(this, atn, decisionsToDFA, new antlr4.atn.PredictionContextCache());
    }
}

myGramarLexer.EOF = antlr4.Token.EOF;
myGramarLexer.DOBCOM_APERTURA = 1;
myGramarLexer.DOBCOM_CIERRE = 2;
myGramarLexer.ESPACIO = 3;
myGramarLexer.FUN = 4;
myGramarLexer.DEV = 5;
myGramarLexer.VAR = 6;
myGramarLexer.EQ = 7;
myGramarLexer.MAYUS = 8;
myGramarLexer.MINUS = 9;
myGramarLexer.LONG = 10;
myGramarLexer.INVERT = 11;
myGramarLexer.REMPL = 12;
myGramarLexer.ADD = 13;
myGramarLexer.IMP = 14;
myGramarLexer.SEMICOLON = 15;
myGramarLexer.COMA = 16;
myGramarLexer.NOMBRE = 17;
myGramarLexer.LETRA = 18;
myGramarLexer.NUM = 19;
myGramarLexer.LPAREN = 20;
myGramarLexer.RPAREN = 21;
myGramarLexer.LBRACE = 22;
myGramarLexer.RBRACE = 23;
myGramarLexer.SIMB = 24;
myGramarLexer.WS = 25;
myGramarLexer.COMILLA_CIERRE_LEX = 26;
myGramarLexer.ESPACIO_EN_CADENA_LEX = 27;

myGramarLexer.INSIDE_STRING = 1;




